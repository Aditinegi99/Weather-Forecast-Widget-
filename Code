<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Weather Widget</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background-image: url('https://images.pexels.com/photos/3408744/pexels-photo-3408744.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260');
      background-size: cover;
      background-position: center;
      transition: background-image 1s ease-in-out;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      padding: 20px;
      position: relative;
    }

    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.3);
      z-index: 0;
    }

    .weather-card {
      position: relative;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(15px);
      border-radius: 20px;
      padding: 2rem;
      text-align: center;
      width: 100%;
      max-width: 350px;
      box-shadow: 0 0 20px rgba(255,255,255,0.3);
      z-index: 1;
    }

    .weather-card input {
      padding: 10px 16px;
      border-radius: 20px;
      border: none;
      outline: none;
      width: 100%;
      max-width: 280px;
      margin-bottom: 10px;
      font-size: 1rem;
      position: relative;
    }

    .suggestions {
      text-align: left;
      margin: 0 auto;
      max-width: 280px;
      border-radius: 0 0 10px 10px;
      background: rgba(255,255,255,0.8);
      color: #000;
      position: absolute;
      top: 90px;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      z-index: 3;
      max-height: 150px;
      overflow-y: auto;
      display: none;
    }

    .suggestions div {
      padding: 8px 16px;
      cursor: pointer;
    }

    .suggestions div:hover {
      background-color: #eee;
    }

    .toggle-mode {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 8px 14px;
      border: none;
      border-radius: 10px;
      background-color: rgba(255,255,255,0.2);
      color: white;
      font-weight: bold;
      cursor: pointer;
      z-index: 2;
    }

    .weather-info h2 {
      font-size: 2rem;
      margin: 10px 0;
      color: #fff;
    }

    .weather-info p {
      margin: 5px 0;
      font-size: 1rem;
      color: #fff;
    }

    .extras {
      margin-top: 1rem;
      font-size: 0.95rem;
      font-weight: 500;
      color: #ffe;
    }
  </style>
</head>
<body>
  <div class="overlay"></div>
  <button class="toggle-mode" onclick="toggleMode()">üåô Mode</button>

  <div class="weather-card">
    <input type="text" id="cityInput" placeholder="Enter city..." autocomplete="off" />
    <div class="suggestions" id="suggestions"></div>
    <div class="weather-info">
      <h2 id="temp">-- ¬∞C</h2>
      <p id="description">Weather Description</p>
      <p id="humidity">Humidity: --%</p>
      <p id="wind">Wind Speed: -- km/h</p>
      <div class="extras" id="extras">Type your city to get weather!</div>
    </div>
  </div>

  <script src="config.js"></script>
  <script>
    const body = document.body;
    const cityInput = document.getElementById('cityInput');
    const suggestionsBox = document.getElementById('suggestions');
    const extras = document.getElementById('extras');

    const cities = [ "Delhi", "Mumbai", "Bangalore", "Chennai", "Kolkata", "Hyderabad", "Pune", "Jaipur", "Lucknow", "Chandigarh", "Indore", "Bhopal", "Goa", "Kanpur", "Patna", "Noida", "Gurgaon", "Varanasi", "Amritsar", "New York", "Los Angeles", "London", "Paris", "Berlin", "Tokyo", "Dubai", "Sydney", "Singapore", "Rome", "Moscow", "Toronto", "Beijing", "Seoul", "Vienna" ];

    cityInput.addEventListener("input", () => {
      const input = cityInput.value.toLowerCase();
      if (!input) return suggestionsBox.style.display = "none";
      const matched = cities.filter(city => city.toLowerCase().startsWith(input));
      showSuggestions(matched);
    });

    function showSuggestions(list) {
      suggestionsBox.innerHTML = "";
      if (list.length === 0) return suggestionsBox.style.display = "none";
      list.forEach(city => {
        const div = document.createElement("div");
        div.textContent = city;
        div.onclick = () => {
          cityInput.value = city;
          suggestionsBox.style.display = "none";
          fetchWeather(city);
        };
        suggestionsBox.appendChild(div);
      });
      suggestionsBox.style.display = "block";
    }

    cityInput.addEventListener("keypress", (e) => {
      if (e.key === 'Enter') {
        const city = cityInput.value.trim();
        if (city) {
          suggestionsBox.style.display = "none";
          fetchWeather(city);
        }
      }
    });

    async function fetchWeather(city) {
      try {
        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${WEATHER_API_KEY}&units=metric`);
        const data = await res.json();

        if (data.cod === 200) {
          const temp = Math.round(data.main.temp);
          const desc = data.weather[0].description;
          const humidity = data.main.humidity;
          const wind = data.wind.speed;

          document.getElementById('temp').innerText = `${temp} ¬∞C`;
          document.getElementById('description').innerText = desc;
          document.getElementById('humidity').innerText = `Humidity: ${humidity}%`;
          document.getElementById('wind').innerText = `Wind Speed: ${wind} km/h`;

          let message = '';
          if (temp > 35) message = '‚òÄÔ∏è Stay hydrated, it\'s hot out there!';
          else if (temp < 5) message = '‚ùÑÔ∏è Bundle up! It\'s really cold.';
          else if (desc.includes('rain')) message = 'üåßÔ∏è Don\'t forget your umbrella!';
          else if (desc.includes('clear')) message = 'üå§Ô∏è Perfect day for a walk!';
          else message = 'üå°Ô∏è Weather looks normal today.';
          extras.innerText = message;

          updateBackgroundFromPexels(city, desc);
        } else {
          alert('City not found');
        }
      } catch (error) {
        alert('Error fetching weather data');
      }
    }

    async function updateBackgroundFromPexels(city, weatherDesc) {
      try {
        const searchQuery = `${city} ${weatherDesc}`;
        const response = await fetch(`https://api.pexels.com/v1/search?query=${searchQuery}&per_page=1`, {
          headers: { Authorization: PEXELS_API_KEY }
        });
        const data = await response.json();
        if (data.photos.length > 0) {
          const imageUrl = data.photos[0].src.landscape;
          body.style.backgroundImage = `url('${imageUrl}')`;
        } else {
          setDefaultBackground();
        }
      } catch (error) {
        setDefaultBackground();
      }
    }

    function setDefaultBackground() {
      body.style.backgroundImage = `url('https://images.pexels.com/photos/3408744/pexels-photo-3408744.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260')`;
    }

    let isDark = true;
    function toggleMode() {
      isDark = !isDark;
      document.querySelector('.overlay').style.backgroundColor = isDark ? 'rgba(0,0,0,0.3)' : 'rgba(255,255,255,0.2)';
      document.querySelector('.toggle-mode').innerText = isDark ? 'üåô Mode' : '‚òÄÔ∏è Mode';
    }
  </script>
</body>
</html>
